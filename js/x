      
        <form class="mt-3 w-80">
            <!-- Email input -->
            <div class="form-outline mb-4">
              <input type="email" id="form2Example1" class="form-control" />
              <label class="form-label" for="form2Example1">Correo</label>
            </div>
          
            <!-- Password input -->
            <div class="form-outline mb-4">
              <input type="password" id="form2Example2" class="form-control" />
              <label class="form-label" for="form2Example2">Contraseña</label>
            </div>
          
           
            <div class="row mb-4">
              <div class="col d-flex justify-content-center">             
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" value="" id="form2Example31" checked />
                  <label class="form-check-label" for="form2Example31"> Recuerdame </label>
                </div>
              </div>
          
              <div class="col d-flex justify-content-center">
                
                <a href="#!">Olvide mi contraseña?</a>
              </div>
            </div>
          
            
            <div class="text-center">
                <button type="button" class="btn btn-primary btn-block mb-4 ">Registrarse</button>
            </div>
            
          
            <!-- Register buttons -->
            <!-- <div class="text-center">
              <p>Not a member? <a href="#!">Register</a></p>
              <p>or sign up with:</p>
              <button type="button" class="btn btn-link btn-floating mx-1">
                <i class="fab fa-facebook-f"></i>
              </button>
          
              <button type="button" class="btn btn-link btn-floating mx-1">
                <i class="fab fa-google"></i>
              </button>
          
              <button type="button" class="btn btn-link btn-floating mx-1">
                <i class="fab fa-twitter"></i>
              </button>
          
              <button type="button" class="btn btn-link btn-floating mx-1">
                <i class="fab fa-github"></i>
              </button>
            </div> -->
          </form>







          //5.-cache network race

          // const source = new Promise((resolve, reject)=> {
          //     let flag = false;
          //     const failsOnce = ()=> {
          //         if (flag) {
          //             //Si ya falló una vez aquí vamos a poner la lógica para controlarlo
          //             if (/\.(png|jpg)/i.test(e.request.url)) {
          //                 resolve(caches.match('img/not-found.png'));
          //             }else{
          //                 reject('SourceNotFound')
          //             }
          //         } else {
          //             flag = true;
          //         }
          //     };
          //     fetch(e.request).then(resFetch => {
          //         resFetch.ok ? resolve(resFetch) : failsOnce();
          //     }).catch(failsOnce);
          //     caches.match(e.request).then((sourceCache)=> {
          //         sourceCache.ok ? resolve(sourceCache) : failsOnce();
          //     }).catch(failsOnce);
          // });
      
          // e.respondWith(source);
      
          //4.- Cache with network update
          //Primero todo lo devuelve del caché
          //Después actualiza el recurso
          //Rendimiento crítico.
          //Desventaja: Siempre se queda un paso atrás.
          // const source = caches.open(STATIC).then(cache => {
          //     fetch(e.request).then(resFetch => {
          //         cache.put(e.request, resFetch);
          //     })
          //     return caches.match(e.request);
          // });
      
          // e.respondWith(source);
      
          // 3.- Network with cache fallback
          // const source = fetch(e.request)
          // .then((res)=> {
          //     if(!res) throw Error("NotFound");
          //     caches.open(DYNAMIC).then(cache => {
          //         cache.put(e.request, res);
          //     });
          //     return res.clone();
          // }).catch(err=> {
          //     return caches.match(e.request);
          // })
          // e.respondWith(source);
      
          // console.log(e.request);
          // if (e.request.url.includes('cosmos.jpg')) {
          //     e.respondWith(fetch('img/cosmoVerde.png'));
          // }
          // else e.respondWith(fetch(e.request));
      
          //1. Cache only - first strategy for cache
          //e.respondWith(caches.match(e.request));
      
          //2.- Cache with network fallback
          // const source = caches.match(e.request)
          // .then((res) => {
          //     if (res) return res;
          //     fetch(e.request).then((resFetch)=> {
          //         caches.open(DYNAMIC).then((cache)=> {
          //             cache.put(e.request, resFetch);
          //         })
          //         return resFetch.clone();
          //     })
          // });
          // e.respondWith(source);

          const APP_SHELL_INMUTABLE = [
    // 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css',
    // 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js',
];

const APP_SHELL = [
    // '/',
    // 'index.html',
    // 'js/app.js',
    // 'img/cosmos.jpg',
    // 'css/styles.css',
    // 'img/char.jpg'
];